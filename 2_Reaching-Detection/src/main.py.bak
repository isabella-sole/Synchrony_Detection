#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os.path
import sys
# sys.path.remove('C:\\Users\\PC\\AppData\\Roaming\\Python\\Python37\\site-packages')
# print('After remove', sys.path)
from Input import Input
from Scene import Scene

import getopt
import Constants
import pygame
from os import listdir
from os.path import isfile, join
import reaching_detection._0_data_constants as reaching_const
import argparse
from utils import isMediaFile



class Twister():

    def __init__(self, file_name):
        # print('----------------',Constants.SCREEN_WIDTH, Constants.SCREEN_HEIGHT)
        self.input = Input(file_name=file_name)
        # print('------------------', no_view)
        if not no_view:
            pygame.init()
            # print('----------------', Constants.SCREEN_WIDTH, Constants.SCREEN_HEIGHT)
            pygame.display.set_mode((Constants.SCREEN_WIDTH, Constants.SCREEN_HEIGHT))
            pygame.display.set_caption("Twister!")
            screen = pygame.display.get_surface()
            self.scene = Scene(screen, self.input)

    def run(self):
        no_frames = 0
        while True:
            if self.input.run(no_frames) == 0:
                break
            # print('------------------', no_view)
            if not no_view:
                self.scene.run()
            print("End of frame number:", no_frames)
            # print("==========================================================")
            no_frames += 1


if __name__ == "__main__":
    # options, remainder = getopt.getopt(sys.argv[1:], 's:x:')
    # for opt, arg in options:
    #     if opt in ('-s'):
    #         song = arg
    #     elif opt in ('-x'):
    #         speed = float(arg)

    # Create the parser
    my_parser = argparse.ArgumentParser(description='Process some arguments')
    # Add the arguments
    my_parser.add_argument('--input',
                           type=str,
                           help='the file(s) or folder of input images and/or videos',
                           default=reaching_const.INPUT_FOLDER)
    my_parser.add_argument('--noview',
                           action='store_true',
                           help='noview is True meaning no output videos are displayed during processing')
    my_parser.add_argument('--trackid',
                           action='store_true',
                           help='trackid is True meaning save track id csv files')
    my_parser.add_argument('--skeleton',
                           action='store_true',
                           help='skeleton is True meaning skeleton results')

    # Execute the parse_args() method
    args = my_parser.parse_args()

    folder_or_file = args.input
    no_view = args.noview
    reaching_const.TRACK_ID = args.trackid
    reaching_const.SKELETON = args.skeleton
    # print('start------------------', reaching_const.SKELETON)
    # print(folder_or_file)
    is_file = False
    is_folder = False

    if os.path.isfile(folder_or_file):
        # print('this is a file')
        is_file = True
    elif os.path.isdir(folder_or_file):
        # print('this is a folder')
        is_folder = True
    else:
        print('The file or folder does not exist')
        sys.exit()

    if is_file:
        file_name = os.path.basename(folder_or_file)
        print('***************************************')
        print(file_name)
        print('***************************************')
        reaching_const.INPUT_FOLDER = os.path.dirname(folder_or_file)
        if isMediaFile(file_name) in ['video', 'image']:
            game = Twister(file_name=file_name)
            game.run()
        else:
            print("Not a video or image!")
    elif is_folder:
        reaching_const.INPUT_FOLDER = folder_or_file
        onlyfiles = [f for f in listdir(reaching_const.INPUT_FOLDER) if isfile(join(reaching_const.INPUT_FOLDER, f))]
        if onlyfiles.__len__() == 0:
            print('There are no files in current folder!')
        for _file in onlyfiles:
            print('***************************************')
            print(_file)
            print('***************************************')
            if isMediaFile(_file) in ['video', 'image']:
                file_name = _file
                # print("RUNNING folder")
                game = Twister(file_name=file_name)
                game.run()
            else:
                print("Not a video or image!")
